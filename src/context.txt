## FRONTEND CODE

# Auth Context

import React, { createContext, useState, useContext, useEffect } from 'react';
import axios from 'axios';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Check if user is already logged in on mount
  useEffect(() => {
    const checkAuthStatus = async () => {
      const token = localStorage.getItem('SESSION_TOKEN');
      if (token) {
        try {
          // Verify token with backend
          const response = await axios.get('http://localhost:5000/api/verify', {
            headers: { Authorization: `Bearer ${token}` }
          });
          setUser(response.data.user);
        } catch (error) {
          localStorage.removeItem('SESSION_TOKEN');
          setUser(null);
        }
      }
      setLoading(false);
    };

    checkAuthStatus();
  }, []);

  const login = async (credentials) => {
    try {
      setError(null);
      setLoading(true);
      
      const response = await axios.post('http://localhost:5000/api/login', credentials, {
        headers: { 'Content-Type': 'application/json' }
      });
      
      const { token, user } = response.data;
      localStorage.setItem('SESSION_TOKEN', token);
      setUser(user);
      
      return { success: true, user };
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message || 'Login failed';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  const register = async (userData) => {
    try {
      setError(null);
      setLoading(true);
      
      const formData = new FormData();
      Object.entries(userData).forEach(([key, value]) => {
        if (value) formData.append(key, value);
      });

      const response = await axios.post('http://localhost:5000/api/register', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      
      const { token, user } = response.data;
      localStorage.setItem('SESSION_TOKEN', token);
      setUser(user);
      
      return { success: true, user };
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message || 'Registration failed';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem('SESSION_TOKEN');
    setUser(null);
    setError(null);
  };

  const updateUser = (updatedUser) => {
    setUser(updatedUser);
  };

  const value = {
    user,
    loading,
    error,
    login,
    register,
    logout,
    updateUser,
    isAuthenticated: !!user,
    isBroker: user?.role === 'broker',
    isUser: user?.role === 'user'
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};


# Protected Route 

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const ProtectedRoute = ({ children, requiredRole }) => {
  const { isAuthenticated, user, loading } = useAuth();

  if (loading) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        <p>Loading...</p>
      </div>
    );
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  if (requiredRole && user?.role !== requiredRole) {
    return <Navigate to="/" replace />;
  }

  return children;
};

export default ProtectedRoute;


# Register Page

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import styles from "../../assets/styles/register.module.css";

const Register = () => {
  const [form, setForm] = useState({
    name: "",
    email: "",
    password: "",
    phone: "",
    role: "user",
    agency_name: "",
    license_number: "",
    bio: "",
    profile_image: null,
  });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [preview, setPreview] = useState(null);
  const [uploading, setUploading] = useState(false);
  const navigate = useNavigate();
  const { register } = useAuth();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    setForm((prev) => ({
      ...prev,
      profile_image: file,
    }));
    setPreview(URL.createObjectURL(file));
  };

  const handleRoleChange = (e) => {
    const role = e.target.value;
    setForm((prev) => ({
      ...prev,
      role,
      agency_name: role === "broker" ? prev.agency_name : "",
      license_number: role === "broker" ? prev.license_number : "",
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");
    setUploading(true);

    // Basic validation
    if (!form.name || !form.email || !form.password) {
      setError("Name, Email, and Password are required.");
      setUploading(false);
      return;
    }
    if (form.role === "broker" && (!form.agency_name || !form.license_number)) {
      setError("Agency Name and License Number are required for brokers.");
      setUploading(false);
      return;
    }

    const result = await register(form);
    setUploading(false);
    
    if (result.success) {
      setSuccess("Registration successful! Redirecting to dashboard...");
      setForm({
        name: "",
        email: "",
        password: "",
        phone: "",
        role: "user",
        agency_name: "",
        license_number: "",
        bio: "",
        profile_image: null,
      });
      setPreview(null);

      setTimeout(() => {
        // Navigate to appropriate dashboard based on role
        if (result.user?.role === "broker") {
          navigate("/broker/dashboard");
        } else {
          navigate("/user/dashboard");
        }
      }, 1200);
    } else {
      setError(result.error);
    }
  };

  return (
    <div className={styles.registerContainer}>
      <h2>Register for RealtyHomes</h2>
      <form onSubmit={handleSubmit} className={styles.registerForm}>
        <label>
          Name<span style={{ color: "red" }}>*</span>
          <input
            type="text"
            name="name"
            value={form.name}
            onChange={handleChange}
            required
          />
        </label>
        <label>
          Email<span style={{ color: "red" }}>*</span>
          <input
            type="email"
            name="email"
            value={form.email}
            onChange={handleChange}
            required
          />
        </label>
        <label>
          Password<span style={{ color: "red" }}>*</span>
          <input
            type="password"
            name="password"
            value={form.password}
            onChange={handleChange}
            required
          />
        </label>
        <label>
          Phone
          <input
            type="tel"
            name="phone"
            value={form.phone}
            onChange={handleChange}
            maxLength={20}
          />
        </label>
        <label>
          Register As
          <select name="role" value={form.role} onChange={handleRoleChange}>
            <option value="user">User</option>
            <option value="broker">Broker</option>
          </select>
        </label>
        {form.role === "broker" && (
          <>
            <label>
              Agency Name<span style={{ color: "red" }}>*</span>
              <input
                type="text"
                name="agency_name"
                value={form.agency_name}
                onChange={handleChange}
                required={form.role === "broker"}
              />
            </label>
            <label>
              License Number<span style={{ color: "red" }}>*</span>
              <input
                type="text"
                name="license_number"
                value={form.license_number}
                onChange={handleChange}
                required={form.role === "broker"}
              />
            </label>
          </>
        )}
        <label>
          Bio
          <textarea
            name="bio"
            value={form.bio}
            onChange={handleChange}
            rows={3}
          />
        </label>
        <label>
          Profile Image
          <input
            type="file"
            accept="image/*"
            onChange={handleImageChange}
            disabled={uploading}
          />
          {preview && (
            <img
              src={preview}
              alt="Profile Preview"
              style={{
                width: 80,
                height: 80,
                marginTop: 8,
                borderRadius: "50%",
              }}
            />
          )}
        </label>
        {error && <div className={styles.error}>{error}</div>}
        {success && <div className={styles.success}>{success}</div>}
        <button type="submit" disabled={uploading}>
          {uploading ? "Registering..." : "Register"}
        </button>
      </form>
    </div>
  );
};

export default Register;


# Login Page

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../contexts/AuthContext";
import styles from "../../assets/styles/register.module.css";

const Login = () => {
  const [form, setForm] = useState({
    email: "",
    password: "",
  });
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    if (!form.email || !form.password) {
      setError("Email and Password are required.");
      setLoading(false);
      return;
    }

    const result = await login(form);
    setLoading(false);
    
    if (result.success) {
      // Navigate based on user role
      const userRole = result.user?.role;
      if (userRole === "broker") {
        navigate("/broker/dashboard");
      } else {
        navigate("/user/dashboard");
      }
    } else {
      setError(result.error);
    }
  };

  return (
    <div className={styles.registerContainer}>
      <h2>Login to RealtyHomes</h2>
      <form onSubmit={handleSubmit} className={styles.registerForm}>
        <label>
          Email
          <input
            type="email"
            name="email"
            value={form.email}
            onChange={handleChange}
            required
          />
        </label>
        <label>
          Password
          <input
            type="password"
            name="password"
            value={form.password}
            onChange={handleChange}
            required
          />
        </label>
        {error && <div className={styles.error}>{error}</div>}
        <button type="submit" disabled={loading}>
          {loading ? "Logging in..." : "Login"}
        </button>
      </form>
    </div>
  );
};

export default Login;


# App.js file

import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import ProtectedRoute from './components/common/ProtectedRoute';
import Register from './components/auth/register';
import Login from './components/auth/login';
import './App.css';
import UserDashboard from './components/user/dashboard';
import BrokerDashboard from './components/broker/dashboard';

// import Home from './components/Home'; // Uncomment and create Home if needed

function App() {
  return (
    <div className="App">
      <AuthProvider>
        <Router>
          <Routes>
            {/* <Route path="/" element={<Home />} /> */}
            <Route path="/register" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route 
              path="/user/dashboard" 
              element={
                <ProtectedRoute>
                  <UserDashboard />
                </ProtectedRoute>
              } 
            />
            <Route 
              path="/broker/dashboard" 
              element={
                <ProtectedRoute requiredRole="broker">
                  <BrokerDashboard />
                </ProtectedRoute>
              } 
            />
          </Routes>
        </Router>
      </AuthProvider>
    </div>
  );
}

export default App;


